
/* WIN
playTestWin:-
    playGame('O', [[' ',' ',' ',' ',' '],[' ','O',' ',' ',' '],[' ','O',' ',' ',' '],[' ','O',' ',' ',' '],[' ','O',' ',' ',' ']], playing).


Complete Diagonal:
[['X',' ',' ',' ',' '],[' ','X',' ',' ',' '],[' ',' ','X',' ',' '],[' ',' ',' ','X',' '],[' ',' ',' ',' ','X']]

Valid Draw:
draw([['X','X','X','X','X'],[' ','O',' ',' ',' '],[' ','O',' ',' ',' '],[' ','O',' ',' ',' '],['O','O','O','O','O']]).

Valid Complete Diagonal1:
completeDiagonal1([['X',' ',' ',' ',' '],[' ','X',' ',' ',' '],[' ',' ','X',' ',' '],[' ',' ',' ','X',' '],[' ',' ',' ',' ','X']], 0, 4,'X').

Valid Complete Diagonal2:
completeDiagonal2([['X',' ',' ',' ','O'],[' ','X',' ','O',' '],[' ',' ','O',' ',' '],[' ','O',' ','X',' '],['O',' ',' ',' ','X']], 0, 4, 'O').

Complete Line:
completeLine([['X','X','X','X','X'],[' ','O',' ',' ',' '],[' ','O',' ',' ',' '],[' ','O',' ',' ',' '],[' ','O',' ',' ',' ']], 5, Player).

Complete Column:
completeColumn([['X','O','X','X','X'],[' ','O',' ',' ',' '],[' ','O',' ',' ',' '],[' ','O',' ',' ',' '],[' ','O',' ',' ',' ']], 5, Player).

Incomplete Column:
completeColumn([['X','O','X','X','X'],[' ','O',' ',' ',' '],[' ','O',' ',' ',' '],[' ','O',' ',' ',' '],[' ','O',' ',' ',' ']], 5, 'X').
*/


/* MOVE
moveTest(Player, Board):-
    move(Player, Board, NewBoard),
    printBoard(NewBoard).
moveTest('O', [[' ',' ',' ',' ','O'],[' ',' ',' ',' ',' '],[' ','',' ',' ',' '],[' ',' ',' ',' ',' '],[' ',' ',' ',' ',' ']]).


move('X', [[' ','O',' ',' ',' '],[' ','O',' ',' ',' '],[' ','O',' ',' ',' '],[' ','O',' ',' ',' '],[' ','O',' ',' ',' ']], NewBoard).
move('O', [['O',' ',' ',' ',' '],[' ','O',' ',' ',' '],[' ','O',' ',' ',' '],[' ','O',' ',' ',' '],[' ','O',' ',' ',' ']], NewBoard).

Valid Move:
movePiece([[' ','O',' ',' ',' '],[' ','O',' ',' ',' '],[' ','O',' ',' ',' '],[' ','O',' ',' ',' '],[' ','O',' ',' ',' ']], 0/3, 4/3, 'O', NewBoard). 
movePiece([[' ','O',' ',' ',' '],[' ','O',' ',' ',' '],[' ','O',' ',' ',' '],[' ','O',' ',' ',' '],[' ','O',' ',' ',' ']], 0/3, 0/1, 'O', NewBoard). 

Invalid Move:
checkMove('X', [['O','O',' ',' ',' '],[' ','O',' ',' ',' '],[' ','O',' ',' ',' '],[' ','O',' ',' ',' '],[' ','O',' ',' ',' ']], 5, 0/5, 0/9).
Valid Moves:
checkMove('O', [['O','O',' ',' ',' '],[' ','O',' ',' ',' '],[' ','O',' ',' ',' '],[' ','O',' ',' ',' '],[' ','O',' ',' ',' ']], 5, 0/5, 0/9).
checkMove('O', [['O',' ',' ',' ',' '],[' ','O',' ',' ',' '],[' ','O',' ',' ',' '],[' ','O',' ',' ',' '],[' ','O',' ',' ',' ']], 5, 0/6, 4/6).
checkMove('X',[[' ','O',' ',' ',' '],[' ','O',' ',' ',' '],[' ','O',' ',' ',' '],[' ','O',' ',' ',' '],[' ','O',' ',' ',' ']], 5, 5/5, 1/5).

*/

/* BOARD
createBoard(Board):-
    resetBoard([], 5, 5, Board),
    printBoard(Board).

createCustomBoard(X):-
    resetBoard([], X, X, FinalBoard),
    write(FinalBoard), nl,
    printBoard(FinalBoard).    

changeBoardLine([[' ','O',' ',' ',' '],[' ','O',' ',' ',' '],[' ','O',' ',' ',' '],[' ','O',' ',' ',' '],[' ','O',' ',' ',' ']], 0, 1, [' ',' ','X',' ',' '], [], FinalBoard).

resetBoard([], 7, 7, FinalBoard).

addLineElem([], C, FinalLine).


shift second line left
changeLine([[' ','O',' ',' ',' '],[' ','O',' ',' ',' '],[' ','O',' ',' ',' '],[' ','O',' ',' ',' '],[' ','O',' ',' ',' ']], 1, 'X', 0, NewBoard).

shift second column up
changeCol([[' ','O',' ',' ',' '],[' ','O',' ',' ',' '],[' ','O',' ',' ',' '],[' ','O',' ',' ',' '],[' ','O',' ',' ',' ']], 1, 'X', 0, NewBoard).

clean board
[[' ',' ',' ',' ',' '],[' ',' ',' ',' ',' '],[' ',' ',' ',' ',' '],[' ',' ',' ',' ',' '],[' ',' ',' ',' ',' ']]
printBoard([[' ',' ',' ',' ',' '],[' ',' ',' ',' ',' '],[' ',' ',' ',' ',' '],[' ',' ',' ',' ',' '],[' ',' ',' ',' ',' ']])

board filled with 'O' in second column
[[' ','O',' ',' ',' '],[' ','O',' ',' ',' '],[' ','O',' ',' ',' '],[' ','O',' ',' ',' '],[' ','O',' ',' ',' ']]

*/